let input = read_file("input/2024/20.txt").trim;

let nb4 = [(-1, 0), (1, 0), (0, -1), (0, 1)];
let grid = input.lines;
let width = grid[0].len;
let height = grid.len;

let start, end = (), ();
for r in (0..height), c in (0..width) {
    if grid[r][c] == "S" {
        start = (r, c);
    } else if grid[r][c] == "E" {
        end = (r, c);
    } 
}

fn dfs(start) {
    let que = Deque();
    que.push_back((start, 0));
    let seen = %{:Inf, start: 0};
    while que.len > 0 {
        let cur, dist = que.pop_front;
        for dir in nb4 {
            let next = cur + dir;
            if next not in seen and next[0] >= 0 and next[0] < height and next[1] >= 0 and next[1] < width and grid[next[0]][next[1]] != "#" {
                seen[next] = dist + 1;
                que.push_back((next, dist + 1));
            }
        }
    }

    return seen;
}

let locs = dfs(end);

let cheats = %{:fn() => %{}};

for from, from_cost in locs {
    for search_dist in 2..=20 {
        for dy in 0..=search_dist {
            let dx = search_dist - dy;
            for delta in [(dy, dx), (dy, -dx), (-dy, dx), (-dy, -dx)] {
                let to = from + delta;
                if to in locs {
                    let to_cost = locs[to];
                    if (from_cost - to_cost - search_dist) >= 100 {
                        cheats[search_dist].insert((from, to));
                    } 
                }
            }
        }
    }
}

let p1, p2 = 0, 0;

for d, o in cheats {
    if d == 2 {
        p1 = o.len;
    }
    p2 += o.len;
}

print(p1, p2);
assert_eq(p1, 1369);
assert_eq(p2, 979012);