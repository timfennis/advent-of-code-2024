fn run_compiled(prog, ra, rb, rc) {
    let output = [];
    while ra > 0 {
        // rb = input mod 8
        rb = ra % 8; // takes last 3 bits of ra
        rb = rb ~ 1;
        // rc = ra / (2^(ra % 8 ~ 1))
        rc = ra \ (2^rb);
        // ADV 3 (div a)
        ra = ra \ 8 // removes the last 3 bits of RA
        // BXC 3 (xor c)
        rb = rb ~ rc;
        // BXL 6 (xor b lit)
        rb = rb ~ 6; // 00000110
        // push the last 3 bits of rb
        output.push(rb % 8);
    }

    output
}

fn run(prog, ra, rb, rc) {
	let ra, rb, rc = ra, rb, rc;
	let output = [];
	let ip = 0;

	fn combo(num) {
		if num == 4 {
			return ra
		} else if num == 5 {
			return rb
		} else if num == 6 {
			return rc 
		} else if num == 7 {
			assert(false);
		} else {
			return num;
		}
	}

	fn lit(op) {
		return op;
		if op >= 0 and op <= 3 {
			return op;
		}

		assert(false);
	}
	while ip < prog.len {
		let ins, op = prog[ip], prog[ip + 1];

		if ins == 0 {
			ra = ra \ (2^combo(op));
			ip += 2;
		} else if ins == 1 {
			rb = rb ~ lit(op);
			ip += 2;
		} else if ins == 2 {
			rb = combo(op) % 8;
			ip += 2;
		} else if ins == 3 {
			if ra != 0 {
				ip = lit(op);
			} else {
				ip += 2;
			}
		} else if ins == 4 {
			rb = rb ~ rc;
			ip += 2;
		} else if ins == 5 {
			output.push(combo(op) % 8);
			ip += 2;
		} else if ins == 6 {
			rb = ra \ (2^combo(op));
			ip += 2;
		} else if ins == 7 {
			rc = ra \ (2^combo(op));
			ip += 2;
		} else {
			assert(false, "invalid instruction");
		}
	}

	// print("TEST", output);
	return output;
}

// let input = read_file("input/2024/17.txt").trim;
let input = "Register A: 33024962
Register B: 0
Register C: 0

Program: 2,4,1,3,7,5,1,5,0,3,4,2,5,5,3,0".trim;

let registers, program = input.paragraphs;
let prog = program.nums;
let ra, rb, rc = registers.nums;

let target = prog.reversed;

let i = 1;
let best_match = 0;

fn count_matches(a, b) {
	let range = (0..(min(a.len, b.len)));
	let count = 0;
	for idx in range {
		if a[idx] == b[idx] {
			count += 1;
		} else {
			return count;
		}
	}
	return 0;
}

while true {
	let out = run(prog, i, 0, 0).reversed;

	// assert(i <= 247839539763386);
	if out == target {
		print(i);
		break;
	}
	if out.len < 16 {
		let cm = count_matches(out, target);
		if cm > best_match {
			print("cm="<> cm);
			best_match  = cm;
			i = i << 3;
		} else {
			i += 1;
		}
	} else {
		i += 1;
	}
}