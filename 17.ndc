let input = read_file("input/2024/17.txt").trim;
// let input = "Register A: 729
// Register B: 0
// Register C: 0

// Program: 0,1,5,4,3,0".trim;

fn run2(prog, ra, rb, rc) {
	let output = [];
	while ra > 0 {
		// rb = input mod 8
		rb = ra % 8; // takes last 3 bits of ra
		rb = rb ~ 1;
		// rc = ra / (2^(ra % 8 ~ 1))
		rc = ra \ (2^rb);
		// ADV 3 (div a)
		ra = ra \ 8 // removes the last 3 bits of RA
		// BXC 3 (xor c)
		rb = rb ~ rc;
		// BXL 6 (xor b lit)
		rb = rb ~ 6; // 00000110
		// push the last 3 bits of rb
		output.push(rb % 8); 
	}

	output
}

fn run(prog, ra, rb, rc) {
	let ra, rb, rc = ra, rb, rc;
	let output = [];
	let ip = 0;

	fn combo(num) {
		if num == 4 {
			return ra
		} else if num == 5 {
			return rb
		} else if num == 6 {
			return rc 
		} else if num == 7 {
			assert(false);
		} else {
			return num;
		}
	}

	fn lit(op) {
		return op;
		if op >= 0 and op <= 3 {
			return op;
		}

		assert(false);
	}
	while ip < prog.len {
		let ins, op = prog[ip], prog[ip + 1];
		// print(ra, rb, rc, "ip="<>ip, "ins="<>ins, op);

		// 2,4,1,1,7,5,0,3,4,3,1,6,5,5,3,0



		if ins == 0 {
			ra = ra \ (2^combo(op));
			ip += 2;
		} else if ins == 1 {
			rb = rb ~ lit(op);
			ip += 2;
		} else if ins == 2 {
			rb = combo(op) % 8;
			ip += 2;
		} else if ins == 3 {
			if ra != 0 {
				ip = lit(op);
			} else {
				ip += 2;
			}
		} else if ins == 4 {
			rb = rb ~ rc;
			ip += 2;
		} else if ins == 5 {
			output.push(combo(op) % 8);
			ip += 2;
		} else if ins == 6 {
			rb = ra \ (2^combo(op));
			ip += 2;
		} else if ins == 7 {
			rc = ra \ (2^combo(op));
			ip += 2;
		} else {
			assert(false, "invalid instruction");
		}
	}

	// print("TEST", output);
	return output;
}

let registers, program = input.paragraphs;
let prog = program.nums;
let ra, rb, rc = registers.nums;

print(run(prog, ra, rb, rc).join(","));
print(run2(prog, ra, rb, rc).join(","));

let bl = 0;
// let i = (2^45) - 100;
// let base = (7 << 45) | (7 << 42);
// let base = 27 << 6;
let base = (56 << 18) | (38 << 12) | 35;
// base = base | (38);
for i in (0..) {
	let out = run2(prog, base | (i <<6) , 0, 0);//  == prog

	let out = out.reversed;
	let prog = prog.reversed;

	if out == prog {
		print("ANSWER: "<>i);
		break;
	} else {
		print("i="<>i, "out="<>out, "prog="<>prog, "outlen="<>out.len,"proglen="<>prog.len);
	}

	i += 1;
}

    // Combo operands 0 through 3 represent literal values 0 through 3.
    // Combo operand 4 represents the value of register A.
    // Combo operand 5 represents the value of register B.
    // Combo operand 6 represents the value of register C.
    // Combo operand 7 is reserved and will not appear in valid programs.
