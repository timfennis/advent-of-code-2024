let input = read_file("input/2024/16.txt").trim;

let nb4 = [(-1, 0), (1, 0), (0, -1), (0, 1)];
let grid = input.lines;
let width = grid[0].len;
let height = grid.len;

fn turn_right(dir) {
    if dir == (0, 1) { (1, 0) }
    else if dir == (1, 0) { (0, -1) }
    else if dir == (0, -1) { (-1, 0) }
    else if dir == (-1, 0) { (0, 1) }
    else { assert(false) }
}

fn turn_left(dir) {
    if dir == (0, 1) { (-1, 0) }
    else if dir == (1, 0) { (0, 1) }
    else if dir == (0, -1) { (1, 0) }
    else if dir == (-1, 0) { (0, -1) }
    else { assert(false) }
}

let start, end = (), ();
for r in (0..height), c in (0..width) {
    if grid[r][c] == "S" {
        start = (r, c);
    } else if grid[r][c] == "E" {
        end = (r, c);
    } 
}

let queue = MinHeap();
let seen = %{:Inf};
queue.push((0, start, (0, -1), [start]));
seen.insert((start, (0, -1)), 0);

let cur_best = Inf;
let all_paths = [];
while queue.len > 0 {
    let cur_cost, cur, dir, path = queue.pop;
  
    if cur == end {
        if cur_cost > cur_best {
            break;
        }

        cur_best min= cur_cost;
        all_paths.push((cur_cost, path));
    }

    for (cost, next_dir) in [(1, dir), (1001, turn_left(dir)), (1001, turn_right(dir))] {
        let next = cur + next_dir;
        let next_cost = cur_cost +  cost;
        if grid[next[0]][next[1]] in ".E" {
            if seen[(next, next_dir)] >= next_cost and next_cost < cur_best {
                seen[(next, next_dir)] = cur_cost + cost;
                queue.push((cur_cost + cost, next, next_dir, path ++ [next]));
            }
        }
    }
}

let best_path = all_paths.map(fn(x) => x[0]).min;
print(best_path);
print(all_paths.map(fn(x) => x[1]).fold(%{}, fn(a, b) => a | b.set).len);
