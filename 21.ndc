let input = read_file("input/2024/21.txt");

let pairs = %{
	(a, b): c
	for a, b, c in [
		"A0<",
		"A3^",
		"02^",
		"0A>",
		"14^",
		"12>",
		"21<",
		"25^",
		"20v",
		"23>",
		"3Av",
		"32<",
		"36^",
		"47^",
		"45>",
		"41v",
		"54<",
		"56>",
		"58^",
		"52v",
		"65<",
		"69^",
		"63v",
		"74v",
		"78>",
		"87<",
		"85v",
		"89>",
		"98<",
		"96v",
		"A^<",
		"A>v",
		"^A>",
		"^vv",
		"<v>",
		"v<<",
		"v^^",
		"v>>",
		">v<",
		">A^"
	]
};

let numpad_graph = %{
	"A": list("03"),
	"0": list("A2"),
	"1": list("42"),
	"2": list("1530"),
	"3": list("A26"),
	"4": list("751"),
	"5": list("2486"),
	"6": list("359"),
	"7": list("48"),
	"8": list("759"),
	"9": list("86"),
};

let keypad_graph = %{
	"A": list("^>"),
	"^": list("Av"),
	"<": list("v"),
	">": list("Av"),
	"v": list("^<>"),
};

fn solve_next(from, to, graph) {
	let q = Deque();
	q.push_back((from, [from]));
	// let seen = %{};

	let options = [];
	while q.len > 0 {
		let cur, path = q.pop_front;
		if cur == to {
			options.push(path);
		} else {
			for nb in graph[cur], if nb not in path {
				// seen.insert(nb);
				q.push_back((nb, path ++ [nb]));
			}
		}
	}

	let shortest = options.map(fn(opt) => opt.len).min;
	let best = options.filter(fn(opt) => opt.len == shortest);
	return best;

}

fn make_seq(from, to, graph) {
	let best = solve_next(from, to, graph);
	best = best.map(fn(route) => route.pairwise(fn(a, b) => pairs[a, b]));
	best = best.map(fn(route) => route ++ ["A"])
	best
}

fn solve_seq(seq, graph) {
	let seq = "A" <> seq;
	let thing = [];
	for (from, to) in seq.pairwise {
		let options = make_seq(from, to, graph).map(fn(x) => x.join(""));
		thing.push(options);
	}

	thing.multi_cartesian_product.map(fn(x) => x.join(""))
}

let p1 = 0;
for line in input.lines {

	let shortest = Inf;
	for s1 in solve_seq(line, numpad_graph) {
		for s2 in solve_seq(s1, keypad_graph) {
			shortest min= solve_seq(s2, keypad_graph).map(fn(s) => s.len).min;
		}	
	}

	let val = nums(line)[0];
	print(shortest, "*", val);
	p1 += shortest * val;
}

print(p1);